<% /* eslint-disable */ %>
<%- include("partials/header"); -%>
<main>
  <div class="post-container">
    <h1 class="post-title">Some blog title about a subject</h1>
    <%# copy and paste the following into post content %>
    <p class="content-p">
      I need a portfolio site. Maybe some developers don’t, but it’s near enough to universal and required that I should definitely have one. I had one previously but I wasn’t super happy with it, so it’s time to add some sweet styling and some new goodies: this blog(!), dark mode, better project navigation, etc. It seemed worth it to document the process and some of the choices I made.
    </p>
    <h3 class="post-subhead">Project Setup and Structure</h3>
    <p class="content-p">
      I wanted the site to be relatively simple. and initially contemplated just using html and css, with potentially a sprinkling of javascript. However, I didn’t want to have to manually add, style and route blog posts every time I wanted to add a new one, so having a backend with some kind of database seemed to make sense. I decided to use node with mongoDB and ejs for templating in order to build a barebones CMS. I briefly looked into more robust CMS solutions (eg. ghost) but this seemed like overkill. Additionally This is a tech stack I’m familiar with; I’ll be able to work quickly and with clarity.
    </p>
    <p class="content-p">
      I decided to make the site one page with additional pages for blog, for individual blog posts, and for my resume. This seemed a good balance between simplicity and discreteness. Our initial (and likely final) file structure looks like:
    </p>
    <pre>
      <code class='language-diff'>portfolio/ (root)
  .git/
  node_modules/
  public/
    css/
    images/
    js/
  views/
    partials/
      header.ejs
      Footer.ejs
    home.ejs
    blog.ejs
    blogpost.ejs
    addpost.ejs
    Resume.ejs
  app.js
  package-lock.json
  package.json
  .env
  .gitignore  views/
      partials/
        header.ejs
        Footer.ejs
      home.ejs
      blog.ejs
      blogpost.ejs
      addpost.ejs
      Resume.ejs
    app.js
    package-lock.json
    package.json
    .env
    .gitignore  views/
        partials/
          header.ejs
          Footer.ejs
        home.ejs
        blog.ejs
        blogpost.ejs
        addpost.ejs
        Resume.ejs
      app.js
      package-lock.json
      package.json
      .env
      .gitignore</code>
    </pre>
    <pre>
<code class='language-js'>cardExpanders.forEach((cardExpander) => {
  cardExpander.addEventListener('mousedown', function () {
    const thisContent = this.parentNode.getElementsByClassName('toggle-content')[0];
    const thisIcon = this.parentNode.getElementsByClassName('toggle-icon')[0];
    // This is a comment
    thisContent.classList.toggle('expanded');
    thisIcon.classList.toggle('rotated');
  });
});</code>
    </pre>
    <p class="content-p">
      One of the key decisions that I made was not to include images within the database structure and add / edit post functionality. Having just completed a <a class="content-link"> project <a> with full image upload and edit functionality, there are a lot of additional complexities (in posting to the database and especially in deploying the app) Since I was going to be writing posts all posts myself in pseudo-html - formatted by the ejs template - a simple text database seemed fine. If I really need an image, I can always hard link it in the post body and push a new version of the public images folder to the server.
    </p>
    <p class="content-p">
      I also decided that dealing with authentication and sessions for most of the site was unnecessary. Instead I’ll use express-basic-auth to password protect the addpost route.
    </p>


  </div>

</main>
<%- include("partials/footer"); -%>
